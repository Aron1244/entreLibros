---
import Layout from "../layouts/Layout.astro";
import AuthRedirect from "../components/AuthRedirect";

let error = '';
let success = '';
let isLoading = false;

const handleSubmit = async (event: Event) => {
  event.preventDefault();
  isLoading = true;
  error = '';
  success = '';

  const data = new FormData(event.target as HTMLFormElement);
  const email = data.get('email');
  const password = data.get('password');

  try {
    // Simular llamada al backend
    const response = await fetch('/api/auth/login', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ email, password }),
    });

    const result = await response.json();

    if (response.ok) {
      success = 'Inicio de sesión exitoso';
      // Redirigir al perfil después de un breve delay
      setTimeout(() => {
        window.location.href = '/profile';
      }, 1500);
    } else {
      error = result.message || 'Error en el inicio de sesión';
    }
  } catch (err) {
    error = 'Error de conexión. Inténtalo de nuevo.';
  } finally {
    isLoading = false;
  }
};
---

<Layout title="EntreLibros - Iniciar sesión">
  <AuthRedirect client:load>
    <div class="min-h-screen flex items-center justify-center bg-primary-dark px-4 py-12">
      <div class="max-w-md w-full bg-primary-light rounded-lg p-8 shadow-lg text-white">
        <h2 class="text-3xl font-extrabold mb-6 text-center">Iniciar sesión</h2>
    
                <div class="space-y-6">
        <div>
          <label for="email" class="block mb-1 text-primary-dark font-semibold">Correo electrónico</label>
          <input
            type="email"
            id="email"
            class="w-full rounded-md px-4 py-3 text-primary-dark focus:outline-none focus:ring-2 focus:ring-primary-light bg-white"
            placeholder="correo@ejemplo.com"
            required
          />
        </div>
  
        <div>
          <label for="password" class="block mb-1 text-primary-dark font-semibold">Contraseña</label>
          <div class="relative">
            <input
              type="password"
              id="password"
              class="w-full rounded-md px-4 py-3 pr-12 text-primary-dark focus:outline-none focus:ring-2 focus:ring-primary-light bg-white"
              placeholder="Tu contraseña"
              required
            />
            <button
              type="button"
              id="toggle-password"
              class="absolute inset-y-0 right-0 pr-3 flex items-center"
              aria-label="Mostrar contraseña"
            >
              <svg class="w-6 h-6 text-gray-800" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3.933 13.909A4.357 4.357 0 0 1 3 12c0-1 4-6 9-6m7.6 3.8A5.068 5.068 0 0 1 21 12c0 1-3 6-9 6-.314 0-.62-.014-.918-.04M5 19 19 5m-4 7a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z"/>
              </svg>
            </button>
          </div>
        </div>

        <div id="error-message" class="text-red-600 font-semibold text-center bg-red-100 p-3 rounded-md hidden"></div>
        <div id="success-message" class="text-green-600 font-semibold text-center bg-green-100 p-3 rounded-md hidden"></div>
  
        <button
          type="button"
          id="login-button"
          class="w-full py-3 bg-primary text-white font-bold rounded-lg hover:bg-primary-dark transition duration-300 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          Iniciar sesión
        </button>

        <div class="text-center">
          <p class="text-primary-dark text-sm">
            ¿No tienes cuenta? 
            <a href="/register" class="text-primary font-semibold hover:underline ml-1">
              Regístrate aquí
            </a>
          </p>
                 </div>
       </div>
     </div>
   </AuthRedirect>
 </Layout>

<script>
  // Script para manejar el login en el cliente
  document.addEventListener('DOMContentLoaded', function() {
    console.log('Script de login cargado');
    
    const emailInput = document.getElementById('email') as HTMLInputElement;
    const passwordInput = document.getElementById('password') as HTMLInputElement;
    const loginButton = document.getElementById('login-button') as HTMLButtonElement;
    const togglePasswordButton = document.getElementById('toggle-password') as HTMLButtonElement;
    const errorDiv = document.getElementById('error-message');
    const successDiv = document.getElementById('success-message');

    if (!emailInput || !passwordInput || !loginButton || !togglePasswordButton) {
      console.error('No se encontraron los elementos del formulario');
      return;
    }

    console.log('Elementos encontrados, agregando event listener');

    loginButton.addEventListener('click', async function() {
      console.log('Botón de login clickeado');
      
      const email = emailInput.value;
      const password = passwordInput.value;

      console.log('Email:', email);
      console.log('Password:', password ? '***' : 'vacío');

      // Validaciones básicas
      if (!email || !password) {
        console.log('Campos vacíos detectados');
        if (errorDiv) {
          errorDiv.textContent = 'Por favor completa todos los campos';
          errorDiv.style.display = 'block';
        }
        return;
      }

      // Mostrar loading
      loginButton.textContent = 'Iniciando sesión...';
      loginButton.setAttribute('disabled', 'true');

      // Limpiar mensajes anteriores
      if (errorDiv) errorDiv.style.display = 'none';
      if (successDiv) successDiv.style.display = 'none';

      try {
        console.log('Iniciando validación de credenciales');
        
        // Simular delay de red
        await new Promise(resolve => setTimeout(resolve, 1000));

        // Validar credenciales (simulación del backend)
        if (email === 'admin@mail.com' && password === '123') {
          console.log('Credenciales correctas, guardando sesión');
          
          // Guardar en localStorage para simular sesión
          const user = {
            email: 'admin@mail.com',
            name: 'Administrador',
            isAuthenticated: true
          };
          
          localStorage.setItem('user', JSON.stringify(user));

          // Disparar evento para actualizar navbar
          window.dispatchEvent(new CustomEvent('authStateChanged'));

          if (successDiv) {
            successDiv.textContent = 'Inicio de sesión exitoso';
            successDiv.style.display = 'block';
          }

          console.log('Redirigiendo en 1.5 segundos...');
          
          // Redirigir después de 1.5 segundos
          setTimeout(() => {
            window.location.href = '/profile';
          }, 1500);
        } else {
          console.log('Credenciales incorrectas');
          if (errorDiv) {
            errorDiv.textContent = 'Correo electrónico o contraseña incorrectos';
            errorDiv.style.display = 'block';
          }
        }
      } catch (err) {
        console.error('Error durante el login:', err);
        if (errorDiv) {
          errorDiv.textContent = 'Error de conexión. Inténtalo de nuevo.';
          errorDiv.style.display = 'block';
        }
      } finally {
        // Restaurar botón
        loginButton.textContent = 'Iniciar sesión';
        loginButton.removeAttribute('disabled');
      }
    });

    // También permitir login con Enter
    const handleEnterKey = async (e: KeyboardEvent) => {
      if (e.key === 'Enter') {
        loginButton.click();
      }
    };

    emailInput.addEventListener('keypress', handleEnterKey);
    passwordInput.addEventListener('keypress', handleEnterKey);

    // Funcionalidad para mostrar/ocultar contraseña
    let isPasswordVisible = false;
    
    togglePasswordButton.addEventListener('click', function() {
      isPasswordVisible = !isPasswordVisible;
      
      if (isPasswordVisible) {
        passwordInput.type = 'text';
        togglePasswordButton.innerHTML = `
          <svg class="w-6 h-6 text-gray-800" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
            <path stroke="currentColor" stroke-width="2" d="M21 12c0 1.2-4.03 6-9 6s-9-4.8-9-6c0-1.2 4.03-6 9-6s9 4.8 9 6Z"/>
            <path stroke="currentColor" stroke-width="2" d="M15 12a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z"/>
          </svg>
        `;
        togglePasswordButton.setAttribute('aria-label', 'Ocultar contraseña');
      } else {
        passwordInput.type = 'password';
        togglePasswordButton.innerHTML = `
          <svg class="w-6 h-6 text-gray-800" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3.933 13.909A4.357 4.357 0 0 1 3 12c0-1 4-6 9-6m7.6 3.8A5.068 5.068 0 0 1 21 12c0 1-3 6-9 6-.314 0-.62-.014-.918-.04M5 19 19 5m-4 7a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z"/>
          </svg>
        `;
        togglePasswordButton.setAttribute('aria-label', 'Mostrar contraseña');
      }
    });

    console.log('Event listeners agregados correctamente');
  });
</script> 